ggplot2::geom_bar(stat = "Identity",
position = "dodge") +
ggplot2::geom_errorbar(data = df.match.sum,
aes(ymin = grand_mean_RT - SE_RT, ymax = grand_mean_RT + SE_RT),
width=.1,
position = position_dodge(.9))
p1
# 以柱状图为例
p2 <- p1 +
ggplot2::scale_y_continuous(expand=c(0, 0),
breaks = seq(0, 0.75, 0.25),
limits = c(0, 0.75)) +
ggplot2::labs(title = "Mean RT for match trials", y = "RT") +
papaja::theme_apa()
p2
p3 <- ggplot2::ggplot(data = df.match.sum,
aes(x = Identity,
y = grand_mean_ACC,
fill = Valence)) +
ggplot2::geom_bar(stat = "Identity",
position = "dodge") +
ggplot2::geom_errorbar(data = df.match.sum,
aes(ymin = grand_mean_ACC - SE_ACC,
ymax = grand_mean_ACC + SE_ACC),
width=.1,
position = position_dodge(.9)) +
ggplot2::scale_y_continuous(expand=c(0, 0),
breaks = seq(0, 1, 0.25),
limits = c(0, 1)) +
ggplot2::labs(title = "Mean ACC for match trials", y = "ACC") +
papaja::theme_apa()
p3
```{r}
df1 <- df.match.sum[,-c(6, 7, 8)]%>%
dplyr::rename(grand_mean = grand_mean_RT,
SD = SD_RT,
SE = SE_RT) %>%
dplyr::mutate(DV = "RT")
df.match.sum.long <- df.match.sum[,-c(3, 4, 5)] %>%
dplyr::rename(grand_mean = grand_mean_ACC,
SD = SD_ACC,
SE = SE_ACC) %>%
dplyr::mutate(DV = "ACC") %>%
rbind(df1,.)
rm(df1)
head(df.match.sum.long, 3) %>% DT::datatable()
p4 <- df.match.sum.long %>%
ggplot2::ggplot(.,
aes(x = Identity,
y = grand_mean,
fill = Valence)) +
ggplot2::geom_bar(stat = "identity",
position=position_dodge(),
) +
ggplot2::geom_errorbar(aes(ymin = grand_mean-1.96*SE,
ymax = grand_mean+1.96*SE),
width = .1,
position = position_dodge(.9)) +
papaja::theme_apa() +
ggplot2::facet_wrap(~DV, scales = "free_y") +
ggplot2::labs(title = "Summary data for matching trials",
x="Identity",
y="mean")
p4
p4
p2 + p3 + plot_layout(guides = "collect")
s1 <- df.match.sum %>%
ggplot2::ggplot(.,
aes(x = Identity,
y = grand_mean_RT,
group = Valence,
color = Valence)) +
ggplot2::geom_line(position = position_dodge(0.5)) +
ggplot2::geom_point(size = 3,
position = position_dodge(0.5)) +
ggplot2::geom_errorbar(aes(ymin=grand_mean_RT-SE_RT,
ymax=grand_mean_RT+SE_RT),
width=.1,
position = position_dodge(0.5)) +
ggplot2::scale_y_continuous(limits = c(0.4, 0.9)) + #选取能纳入全部散点的范围
papaja::theme_apa()
s1
s2 <- s1 +
ggplot2::geom_point(data = df.match.subj,
aes(x = Identity,
y = RT_mean,
group = Valence))
s2
s3 <- s1 +
ggplot2::geom_point(data = df.match.subj,
aes(x = Identity, y = RT_mean, group = Valence),
position = position_jitter(width = 0.1),
alpha = 0.5)
df.match.plot <- df.match.subj %>%
dplyr::mutate(conds = case_when(Identity == "Self" & Valence == "moral" ~ "0.88",
Identity == "Self" & Valence == "immoral" ~ "1.12",
Identity == "Other" & Valence == "moral" ~ "1.88",
Identity == "Other" & Valence == "immoral" ~ "2.12"),
conds = as.numeric(conds))
df.match.plot <- df.match.subj %>%
dplyr::mutate(conds = case_when(Identity == "Self" & Valence == "moral" ~ "0.88",
Identity == "Self" & Valence == "immoral" ~ "1.12",
Identity == "Other" & Valence == "moral" ~ "1.88",
Identity == "Other" & Valence == "immoral" ~ "2.12"),
conds = as.numeric(conds))
s4 <- s1 +
ggplot2::geom_point(data = df.match.plot,
aes(x = conds, y = RT_mean, group = Valence),
position = position_jitter(width = 0.08),
alpha = 0.5)
s5 <- s4 +
ggplot2::geom_line(data = df.match.plot,
aes(x = conds, y = RT_mean, group = Sub),
linetype = 1,
size=0.8,
color="#000000",
alpha=0.1)
s5
s6 <- s1 +
ggplot2::geom_point(data = df.match.plot,
aes(x = conds,
y = RT_mean,
group = as.factor(Sub)),
position = position_dodge(0.08),
color="#000000",
alpha = 0.05) +
ggplot2::geom_line(data = df.match.plot,
aes(x = conds,
y = RT_mean,
group = as.factor(Sub)),
position = position_dodge(0.08),
linetype = 1,
size=0.8,
color="#000000",
alpha=0.05) +
ggplot2::labs(y = "RT")
s6
s7 <- df.match.sum %>%
ggplot2::ggplot(.,
aes(x = Identity,
y = grand_mean_ACC,
group = Valence,
color = Valence)) +
ggplot2::geom_line(position = position_dodge(0.5)) +
ggplot2::geom_point(size = 3,
position = position_dodge(0.5)) +
ggplot2::geom_errorbar(aes(ymin = grand_mean_ACC - SE_ACC,
ymax = grand_mean_ACC + SE_ACC),
width=.1,
position = position_dodge(0.5)) +
ggplot2::scale_y_continuous(breaks = seq(0.4, 1.0, 0.2), limits = c(0.3, 1.0)) + #选取能纳入全部散点的范围
papaja::theme_apa()
s8
s8 <- s7 +
ggplot2::geom_point(data = df.match.plot,
aes(x = conds,
y = ACC_mean,
group = as.factor(Sub)),
position = position_dodge(0.08),
color="#000000",
alpha = 0.05) +
ggplot2::geom_line(data = df.match.plot,
aes(x = conds,
y = ACC_mean,
group = as.factor(Sub)),
position = position_dodge(0.08),
linetype = 1,
size=0.8,
color="#000000",
alpha=0.05) +
ggplot2::labs(y = "ACC")
s8
s9 <- s6 + s8 + plot_layout(guides = "collect")
s9
# 保存为pdf更加清晰
ggplot2::ggsave(filename = "./pic/chp12/p1.pdf",
plot = s9,
width = 8,
height = 4)
#此处选择12个被试是为了在展示的时候更清晰
sublist <- unique(df.match.trial$Sub)
target2 <- df.match.trial %>%
dplyr::filter(Sub == sublist[1:12]) %>%
dplyr::mutate(Label = factor(Label, levels = c("moralSelf", "moralOther", "immoralSelf", "immoralOther")),
Sub = factor(Sub))
model <- lme4::lmer(data = target2,
RT ~ Identity * Valence + (1 |Sub))
# 提取随机效应
ranef_df <- as.data.frame(ranef(model)$Sub) %>%
dplyr::mutate(Sub = row.names(.)) %>%
dplyr::rename(Intercept = "(Intercept)") %>%
dplyr::mutate(se = sqrt(diag(vcov(model))[1]),
lower = Intercept - 1.96 *se,
upper = Intercept + 1.96 *se) %>%
dplyr::arrange(Intercept) %>%
dplyr::mutate(Sub = factor(Sub, levels = .$Sub))
# 绘制森林图
ranef_df %>%
ggplot2::ggplot(., aes(x=Intercept, y=Sub)) +
ggplot2::geom_point(size = 2) +
ggplot2::geom_errorbarh(aes(xmax = upper, xmin = lower),
height = .2, color = 'grey') +
ggplot2::geom_vline(xintercept = 0, linetype = 2) +
# ggplot2::facet_wrap(~ variable, nrow = 1) + # 按照对象分面
papaja::theme_apa()
# 创建一个空list用于存放数据集
df <- list()
# 创建一个空list用于存放图片
p <- list()
df[[1]] <-  read.csv('./data/match/match_raw.csv',
header = T, sep=",", stringsAsFactors = FALSE)
df[[1]] <-  read.csv('./data/match/match_raw.csv',
header = T, sep=",", stringsAsFactors = FALSE)
names(df)[1] <- "Raw"
df[[2]] <- df[[1]] %>%
dplyr::group_by(Sub, Shape, Match) %>%
dplyr::summarise(RT_mean = mean(RT)) %>%
dplyr::ungroup()
names(df)[2] <- "Clean"
df[[2]] <- df[[1]] %>%
dplyr::group_by(Sub, Shape, Match) %>%
dplyr::summarise(RT_mean = mean(RT)) %>%
dplyr::ungroup()
names(df)[2] <- "Clean"
df[[2]] <- df[[1]] %>%
dplyr::group_by(Sub, Shape, Match) %>%
dplyr::summarise(RT_mean = mean(RT)) %>%
dplyr::ungroup()
names(df)[2] <- "Clean"
# 最简单的箱线图
# 看看不同Shape情况下 平均反应时的分布情况
p[[1]] <- ggplot2::ggplot(df[[2]], aes(x = Shape, y = RT_mean, fill = Shape)) +
ggplot2::geom_boxplot(color = "grey", alpha = 0.5)
names(p)[1] <- "Basic: Box Plot"; p[[1]]
# 增加横纵坐标标题
p[[2]] <- p[[1]] +
ggplot2::labs(x = "Moral & Identity", y = "Mean of Reaction Time", title = "Boxplot of RT_mean by Shape")
ggsave(filename = "./pic/chp12/plot2.png", plot = p[[2]], height = 5, width = 10, dpi = 300)
# 叠加点图
p[[3]] <- p[[2]] +
ggplot2::geom_point(aes(colour = Shape), position = position_jitter(width = 0.2), size = 3, alpha = 0.5)
names(p)[3] <- "Basic: Point Plot"; p[[3]]
ggsave(filename = "./pic/chp12/plot3.png", plot = p[[3]], height = 5, width = 10, dpi = 300)
# 叠加小提琴图
p[[4]] <- p[[3]] +
ggplot2::geom_violin(aes(colour = Shape), color = "grey", width = 0.2, alpha = 0.5)
ggsave(filename = "./pic/chp12/plot4.png", plot = p[[4]], height = 5, width = 10, dpi = 300)
# 太拥挤了，三种图应该错开一定的距离, 以及调整每个图形的宽度
p[[5]] <- ggplot2::ggplot(df[[2]], aes(x = Shape, y = RT_mean, fill = Shape)) +
ggplot2::geom_boxplot(width = 0.1, position = position_nudge(x = -0.2), color = "grey", alpha = 0.5) + # 箱线图左移0.2个单位，宽度0.1
ggplot2::geom_point(aes(colour = Shape), position = position_jitter(width = 0.1), size = 3, alpha = 0.5) + # 点图处于中间，但是调整宽度
ggplot2::geom_violin(aes(colour = Shape), width = 0.1, position = position_nudge(x = 0.2), color = "grey", alpha = 0.5) + # 小提琴图右移0.2各单位，宽度0.1
ggplot2::labs(x = "Moral & Identity", y = "Mean of Reaction Time", title = "Boxplot of RT_mean by Shape")
ggsave(filename = "./pic/chp12/plot5.png", plot = p[[5]], height = 5, width = 10, dpi = 300)
# 叠加云图 raincloud plot
p[[6]] <- p[[5]] +
ggdist::stat_halfeye(adjust = 0.2,justification = -0.35, alpha = 0.5, width = 0.5,   # adjust 拟合的锐度(平滑度), justification位置(与ggplot方向相反), alpha 透明度
.width = 0, point_colour = NA) # 如果没有 .width = 0, point_colour = NA, halfeye也会画出一些黑点
ggsave(filename = "./pic/chp12/plot6.png", plot = p[[6]], height = 5, width = 10, dpi = 300)
# violin图被halfeye遮挡了，可以删掉它
p[[7]] <- p[[6]] # 把p[[6]]传递给p[[7]]
# 这样就删除了violin这个图层
names(p)[7] <- "Basic: Delete Layers"; p[[7]]
# 这样就删除了violin这个图层
names(p)[7] <- "Basic: Delete Layers"; p[[7]]
ggsave(filename = "./pic/chp12/plot7.png", plot = p[[7]], height = 5, width = 10, dpi = 300)
# ggdist的点图比ggplot2的更好看
p[[8]] <- ggplot2::ggplot(df[[2]], aes(x = Shape, y = RT_mean, fill = Shape,)) +
ggplot2::geom_boxplot(width = 0.1, position = position_nudge(x = -0.05), color = "grey", alpha = 0.5, outlier.color = NA,) + # 箱线图左移0.2个单位
ggdist::stat_halfeye(adjust = 0.2,justification = -0.05, alpha = 0.5, width = 0.5, .width = 0, point_colour = NA) +
ggdist::stat_dots(side = "left",justification = 1.15, alpha = 0.5) +
ggplot2::labs(x = "Moral & Identity", y = "Mean of Reaction Time", title = "RainCloud Plot of RT_mean by Moral & Identity")
# ggdist的点图比ggplot2的更好看
p[[8]] <- ggplot2::ggplot(df[[2]], aes(x = Shape, y = RT_mean, fill = Shape,)) +
ggplot2::geom_boxplot(width = 0.1, position = position_nudge(x = -0.05), color = "grey", alpha = 0.5, outlier.color = NA,) + # 箱线图左移0.2个单位
ggdist::stat_halfeye(adjust = 0.2,justification = -0.05, alpha = 0.5, width = 0.5, .width = 0, point_colour = NA) +
ggdist::stat_dots(side = "left",justification = 1.15, alpha = 0.5) +
ggplot2::labs(x = "Moral & Identity", y = "Mean of Reaction Time", title = "RainCloud Plot of RT_mean by Moral & Identity")
names(p)[8] <- "Basic: RainCloud Plot"; p[[8]]
ggsave(filename = "./pic/chp12/plot8.png", plot = p[[8]], height = 5, width = 10, dpi = 300)
# 旋转图片，现在终于明白为什么叫raincloud了
p[[9]] <- p[[8]] +
ggplot2::coord_flip()
ggsave(filename = "./pic/chp12/plot9.png", plot = p[[9]], height = 5, width = 10, dpi = 300)
# 在这张图里，图例和横坐标表达的信息重复了，可以隐藏图例
p[[10]] <- p[[9]] +
ggplot2::theme(legend.position = "none")
ggsave(filename = "./pic/chp12/plot10.png", plot = p[[10]], height = 5, width = 10, dpi = 300)
popsicle <- c("#F3533A", "#FA9F42", "#8AD879", "#5ACFC9")
popsicle <- c("#F3533A", "#FA9F42", "#8AD879", "#5ACFC9")
sunset <- c("#C848B9", "#F962A7", "#FD836D", "#FFBA69")
glassdoor <- c("#3D9A8B", "#2EB19F", "#63C2D2", "#B7EDFF")
palette <- list(popsicle = popsicle, sunset = sunset, glassdoor = glassdoor)
rm(popsicle, sunset, glassdoor)
# 更改图片的填充颜色
p[[11]] <- p[[10]] +
ggplot2::scale_fill_manual(values = palette$popsicle)  # 用什么颜色，体现了你的审美！
```{r plot 12, eval=FALSE, warning=FALSE, include=FALSE}
# 坐标轴颜色
p[[12]] <- p[[11]] +
ggplot2::theme(axis.text.y = element_text(color = palette$popsicle))
ggsave(filename = "./pic/chp12/plot12.png", plot = p[[12]], height = 5, width = 10, dpi = 300)
```{r plot 13, eval=FALSE, warning=FALSE, include=FALSE}
names(p)[13] <- "Basic: Axis Text Size"; p[[13]]
ggsave(filename = "./pic/chp12/plot13.png", plot = p[[13]], height = 5, width = 10, dpi = 300)
names(p)[14] <- "Basic: Facet"; p[[14]]
ggsave(filename = "./pic/chp12/plot14.png", plot = p[[14]], height = 5, width = 10, dpi = 300)
# 图上文字的大小
p[[13]] <- p[[12]] +
ggplot2::theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16),)
ggsave(filename = "./pic/chp12/plot13.png", plot = p[[13]], height = 5, width = 10, dpi = 300)
# 按照Match拆分为两个Facet
p[[14]] <- p[[13]] +
ggplot2::facet_wrap(~Match)
ggsave(filename = "./pic/chp12/plot14.png", plot = p[[14]], height = 5, width = 10, dpi = 300)
# Facet文字的大小
p[[15]] <- p[[14]] +
ggplot2::theme(strip.text = element_text(size = 14))
names(p)[15] <- "Basic: Facet Text Size"; p[[15]]
# Facet文字的大小
p[[15]] <- p[[14]] +
ggplot2::theme(strip.text = element_text(size = 14))
names(p)[15] <- "Basic: Facet Text Size"; p[[15]]
ggsave(filename = "./pic/chp12/plot15.png", plot = p[[15]], height = 5, width = 10, dpi = 300)
p[[16]] <- ggplot2::ggplot(df[[2]],
aes(x = Shape, y = RT_mean,
fill = interaction(Shape, Match),)) + # fill的颜色基于Shape和Match
ggplot2::geom_boxplot(width = 0.1, position = position_nudge(x = -0.05), alpha = 0.5, outlier.color = NA, color = "grey") +
ggdist::stat_halfeye(adjust = 0.2,justification = -0.05, alpha = 0.5, width = 0.5, .width = 0, point_colour = NA,) +
ggdist::stat_dots(side = "left",justification = 1.15, alpha = 0.5,) +
ggplot2::labs(x = "Moral & Identity", y = "Mean of Reaction Time", title = "RainCloud Plot of RT_mean by Moral & Identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c(palette$sunset, palette$glassdoor)) + # 需要八种颜色来填充图片
ggplot2::facet_wrap(~Match, ncol = 1)
names(p)[16] <- "Basic: Interactional Fill"; p[[16]]
ggsave(filename = "./pic/chp12/plot16.png",plot = p[[16]], height = 5, width = 10, dpi = 300)
```{r plot 17, eval=FALSE, warning=FALSE, include=FALSE}
# theme_bw() 会改变很多地方的颜色，让主题变成黑白，方便接下来的细节修改
p[[17]] <- p[[16]] +
ggplot2::theme_bw()
ggsave(filename = "./pic/chp12/plot17.png", plot = p[[17]], height = 5, width = 10, dpi = 300)
# APA默认图例局右
p[[18]] <- p[[17]] +
ggplot2::theme(legend.position = "right",)  # 也可以去掉图例
names(p)[18] <- "APA theme: legend.position"; p[[18]]
names(p)[18] <- "APA theme: legend.position"; p[[18]]
ggsave(filename = "./pic/chp12/plot18.png", plot = p[[18]], height = 5, width = 10, dpi = 300)
除了字体大小，标题粗体居中
# 除了字体大小，标题粗体居中
p[[19]] <- p[[18]] +
ggplot2::theme(axis.text = element_text(size = 12), # 坐标轴字体大小
axis.title = element_text(size = 12), # 坐标轴标题字体大小
strip.text = element_text(size = 12), # facet标题字体大小
plot.title = element_text(size = 12, face = "bold", hjust = 0.5)) # 图片整体标题字体大小 title粗体，居中
ggsave(filename = "./pic/chp12/plot19.png", plot = p[[19]], height = 5, width = 10, dpi = 300)
# 去掉facet标题底色
p[[20]] <- p[[19]] +
ggplot2::theme(strip.background = element_blank())
ggsave(filename = "./pic/chp12/plot20.png", plot = p[[20]], height = 5, width = 10, dpi = 300)
# 隐藏水平网格线
p[[21]] <- p[[20]] +
ggplot2::theme(panel.grid.major=element_blank())
names(p)[21] <- "APA theme: panel.grid.major"; p[[21]]
names(p)[21] <- "APA theme: panel.grid.major"; p[[21]]
ggsave(filename = "./pic/chp12/plot21.png", plot = p[[21]], height = 5, width = 10, dpi = 300)
# 隐藏垂直网格线
p[[22]] <- p[[21]] +
ggplot2::theme(panel.grid.minor=element_blank())
names(p)[22] <- "APA theme: panel.grid.minor"; p[[22]]
# 隐藏垂直网格线
p[[22]] <- p[[21]] +
ggplot2::theme(panel.grid.minor=element_blank())
names(p)[22] <- "APA theme: panel.grid.minor"; p[[22]]
ggsave(filename = "./pic/chp12/plot22.png", plot = p[[22]], height = 5, width = 10, dpi = 300)
# 隐藏边框
p[[23]] <- p[[22]] +
ggplot2::theme(panel.border=element_blank()) # 也可以不去除边框，保留坐标轴
names(p)[23] <- "APA theme: panel.border"; p[[23]]
ggsave(filename = "./pic/chp12/plot23.png", plot = p[[23]], height = 5, width = 10, dpi = 300)
# 改变图上字体family
p[[24]] <- p[[23]] +
ggplot2::theme(text=element_text(family='Times New Roman'))
names(p)[24] <- "APA theme: font_family"; p[[24]]
# 改变图上字体family
p[[24]] <- p[[23]] +
ggplot2::theme(text=element_text(family='Times New Roman'))
names(p)[24] <- "APA theme: font_family"; p[[24]]
ggsave(filename = "./pic/chp12/plot24.png", plot = p[[24]], height = 5, width = 10, dpi = 300)
# 使用windowsFonts()查看字体对应的名字是什么, 运气好，里面就有times new roman
windowsFonts()
# 如果没有，可以library(extrafont)
library(extrafont)
# 这个包很笨，只能添加一个文件夹内的字体，
# 默认添加"C:/WINDOWS/FONT/"，这里面有你电脑里所有的字体
# 因此建议你把需要的字体放到桌面，
# 然后设置导入路径font_import(path = "C:/user/desktop/")
font_import(path = "C:/user/desktop/")
# 使用windowsFonts()查看字体对应的名字是什么, 运气好，里面就有times new roman
windowsFonts()
# 如果没有，可以library(extrafont)
library(extrafont)
# 这个包很笨，只能添加一个文件夹内的字体，
# 默认添加"C:/WINDOWS/FONT/"，这里面有你电脑里所有的字体
# 因此建议你把需要的字体放到桌面，
# 然后设置导入路径font_import(path = "C:/user/desktop/")
font_import(path = "C:/user/desktop/")
# 最后使用 fonttable()，查看字体是否被导入了，
# 记住times new roman对应的FamilyName
fonttable()
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
#此处选择12个被试是为了在展示的时候更清晰
sublist <- unique(df.match.trial$Sub)
target2 <- df.match.trial %>%
dplyr::filter(Sub == sublist[1:12]) %>%
dplyr::mutate(Label = factor(Label, levels = c("moralSelf", "moralOther", "immoralSelf", "immoralOther")),
Sub = factor(Sub))
model <- lme4::lmer(data = target2,
RT ~ Identity * Valence + (1 |Sub))
# 保存为pdf更加清晰
ggplot2::ggsave(filename = "./pic/chp12/p1.pdf",
plot = s9,
width = 8,
height = 4)
#此处选择12个被试是为了在展示的时候更清晰
sublist <- unique(df.match.trial$Sub)
target2 <- df.match.trial %>%
dplyr::filter(Sub == sublist[1:12]) %>%
dplyr::mutate(Label = factor(Label, levels = c("moralSelf", "moralOther", "immoralSelf", "immoralOther")),
Sub = factor(Sub))
model <- lme4::lmer(data = target2,
RT ~ Identity * Valence + (1 |Sub))
# 提取随机效应
ranef_df <- as.data.frame(ranef(model)$Sub) %>%
dplyr::mutate(Sub = row.names(.)) %>%
dplyr::rename(Intercept = "(Intercept)") %>%
dplyr::mutate(se = sqrt(diag(vcov(model))[1]),
lower = Intercept - 1.96 *se,
upper = Intercept + 1.96 *se) %>%
dplyr::arrange(Intercept) %>%
dplyr::mutate(Sub = factor(Sub, levels = .$Sub))
# 绘制森林图
ranef_df %>%
ggplot2::ggplot(., aes(x=Intercept, y=Sub)) +
ggplot2::geom_point(size = 2) +
ggplot2::geom_errorbarh(aes(xmax = upper, xmin = lower),
height = .2, color = 'grey') +
ggplot2::geom_vline(xintercept = 0, linetype = 2) +
# ggplot2::facet_wrap(~ variable, nrow = 1) + # 按照对象分面
papaja::theme_apa()
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
install.packages("pdftools")
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
if (requireNamespace("pdftools", quietly = TRUE)) {
message("pdftools 已安装！")
} else {
message("正在安装 pdftools...")
install.packages("pdftools")
}
if (requireNamespace("magick", quietly = TRUE)) {
message("magick 已安装！")
} else {
message("正在安装 magick...")
install.packages("magick")
}
library(pdftools)
library(magick)
convert_pdf_to_png <- function(pdf_path, output_dir) {
# 检查输出目录是否存在，如果不存在则创建
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# 获取PDF中的页面数
pdf_info <- pdf_info(pdf_path)
num_pages <- pdf_info$pages
# 循环遍历每一页，将其转换为PNG
for (page in 1:num_pages) {
# 读取PDF的某一页
img <- image_read_pdf(pdf_path, pages = page)
# 创建输出文件名
output_filename <- file.path(output_dir, paste0(page, ".png"))
# 保存PNG文件
image_write(img, path = output_filename, format = "png")
}
message("PDF转换完成！所有PNG文件已保存在目录：", output_dir)
}
# 设置PDF文件路径和输出目录
pdf_file_path <- "./14.pdf"
output_directory <- "./14_pngs"
# 调用函数进行转换
convert_pdf_to_png(pdf_file_path, output_directory)
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
git pull
bookdown::publish_book('render='local)
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
bookdown::publish_book(render = 'local')
